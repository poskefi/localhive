{"ast":null,"code":"\"use strict\";\n\nimport { getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators.js\";\nimport { BottomSheetAndroid, DefaultTransition, FadeFromBottomAndroid, FadeFromRightAndroid, ModalFadeTransition, ModalSlideFromBottomIOS, ModalTransition, RevealFromBottomAndroid, ScaleFromCenterAndroid, SlideFromLeftIOS, SlideFromRightIOS } from \"../../TransitionConfigs/TransitionPresets.js\";\nimport { findLastIndex } from \"../../utils/findLastIndex.js\";\nimport { getDistanceForDirection } from \"../../utils/getDistanceForDirection.js\";\nimport { getModalRouteKeys } from \"../../utils/getModalRoutesKeys.js\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens.js\";\nimport { CardContainer } from \"./CardContainer.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid\n  })\n};\nconst EPSILON = 1e-5;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getInterpolationIndex = (scenes, index) => {\n  const {\n    cardStyleInterpolator\n  } = scenes[index].descriptor.options;\n  let interpolationIndex = 0;\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent = scenes[i]?.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nconst getIsModalPresentation = cardStyleInterpolator => {\n  return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nconst getIsModal = (scene, interpolationIndex, isParentModal) => {\n  if (isParentModal) {\n    return true;\n  }\n  const {\n    cardStyleInterpolator\n  } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nconst getHeaderHeights = (scenes, insets, isParentHeaderShown, isParentModal, layout, previous) => {\n  return scenes.reduce((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle\n    } = curr.descriptor.options;\n    const style = StyleSheet.flatten(headerStyle || {});\n    const height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (layout, descriptor, isRTL) => {\n  if (descriptor?.options.gestureDirection) {\n    return getDistanceForDirection(layout, descriptor?.options.gestureDirection, isRTL);\n  }\n  const defaultGestureDirection = descriptor?.options.presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection;\n  const gestureDirection = descriptor?.options.animation ? NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection : defaultGestureDirection;\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\nconst getProgressFromGesture = (gesture, layout, descriptor, isRTL) => {\n  const distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor, isRTL);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n    const gestures = [...props.routes, ...props.state.preloadedRoutes].reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n      const {\n        animation\n      } = descriptor?.options || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animation !== 'none' || props.state.preloadedRoutes.includes(curr) ? getDistanceFromOptions(state.layout, descriptor, props.direction === 'rtl') : 0);\n      return acc;\n    }, {});\n    const modalRouteKeys = getModalRouteKeys([...props.routes, ...props.state.preloadedRoutes], Object.assign({}, props.descriptors, props.preloadedDescriptors));\n    const scenes = [...props.routes, ...props.state.preloadedRoutes].map((route, index, self) => {\n      const isPreloaded = props.state.preloadedRoutes.includes(route);\n      const previousRoute = isPreloaded ? undefined : self[index - 1];\n      const nextRoute = isPreloaded ? undefined : self[index + 1];\n      const oldScene = state.scenes[index];\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n      const descriptor = (isPreloaded ? props.preloadedDescriptors : props.descriptors)[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n      const nextDescriptor = nextRoute && (props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key]);\n      const previousDescriptor = previousRoute && (props.descriptors[previousRoute?.key] || state.descriptors[previousRoute?.key]);\n      const optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n      const isModal = modalRouteKeys.includes(route.key);\n      const excludedPlatforms = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos';\n      const animation = optionsForTransitionConfig.animation ?? (excludedPlatforms ? 'default' : 'none');\n      const isAnimationEnabled = animation !== 'none';\n      const transitionPreset = animation !== 'default' ? NAMED_TRANSITIONS_PRESETS[animation] : isModal || optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n      const {\n        gestureEnabled = Platform.OS === 'ios' && isAnimationEnabled,\n        gestureDirection = transitionPreset.gestureDirection,\n        transitionSpec = transitionPreset.transitionSpec,\n        cardStyleInterpolator = isAnimationEnabled ? transitionPreset.cardStyleInterpolator : forNoAnimationCard,\n        headerStyleInterpolator = transitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)\n      } = optionsForTransitionConfig;\n      const headerMode = descriptor.options.headerMode ?? (!(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || nextDescriptor?.options.presentation === 'modal' || nextDescriptor?.options.presentation === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen');\n      const isRTL = props.direction === 'rtl';\n      const scene = {\n        route,\n        descriptor: Object.assign({}, descriptor, {\n          options: Object.assign({}, descriptor.options, {\n            animation,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode\n          })\n        }),\n        progress: {\n          current: getProgressFromGesture(currentGesture, state.layout, descriptor, isRTL),\n          next: nextGesture && nextDescriptor?.options.presentation !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor, isRTL) : undefined,\n          previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor, isRTL) : undefined\n        },\n        __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n      };\n      if (oldScene && scene.__memo.every((it, i) => {\n        return oldScene.__memo[i] === it;\n      })) {\n        return oldScene;\n      }\n      return scene;\n    });\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      headerHeights: {}\n    };\n  }\n  handleLayout = e => {\n    const {\n      height,\n      width\n    } = e.nativeEvent.layout;\n    const layout = {\n      width,\n      height\n    };\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n      return {\n        layout,\n        headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n      };\n    });\n  };\n  handleHeaderLayout = ({\n    route,\n    height\n  }) => {\n    this.setState(({\n      headerHeights\n    }) => {\n      const previousHeight = headerHeights[route.key];\n      if (previousHeight === height) {\n        return null;\n      }\n      return {\n        headerHeights: Object.assign({}, headerHeights, {\n          [route.key]: height\n        })\n      };\n    });\n  };\n  getFocusedRoute = () => {\n    const {\n      state\n    } = this.props;\n    return state.routes[state.index];\n  };\n  getPreviousScene = ({\n    route\n  }) => {\n    const {\n      getPreviousRoute\n    } = this.props;\n    const {\n      scenes\n    } = this.state;\n    const previousRoute = getPreviousRoute({\n      route\n    });\n    if (previousRoute) {\n      const previousScene = scenes.find(scene => scene.descriptor.route.key === previousRoute.key);\n      return previousScene;\n    }\n    return undefined;\n  };\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      openingRouteKeys,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios'\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(scene => {\n      const options = scene.descriptor.options ?? {};\n      const {\n        headerMode,\n        headerTransparent,\n        headerShown = true\n      } = options;\n      if (headerTransparent || headerShown === false || headerMode === 'screen') {\n        return true;\n      }\n      return false;\n    });\n    let activeScreensLimit = 1;\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        options\n      } = scenes[i].descriptor;\n      const {\n        detachPreviousScreen = options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, scene => {\n          const {\n            cardStyleInterpolator\n          } = scene.descriptor.options;\n          return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator?.name === 'forModalPresentationIOS';\n        }) : true\n      } = options;\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n    const floatingHeader = _jsx(React.Fragment, {\n      children: renderHeader({\n        mode: 'float',\n        layout,\n        scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })\n    }, \"header\");\n    return _jsxs(View, {\n      style: styles.container,\n      children: [isFloatHeaderAbsolute ? null : floatingHeader, _jsx(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout,\n        children: [...routes, ...state.preloadedRoutes].map((route, index) => {\n          const focused = focusedRoute.key === route.key;\n          const gesture = gestures[route.key];\n          const scene = scenes[index];\n          const isPreloaded = state.preloadedRoutes.includes(route) && !routes.includes(route);\n          if (state.preloadedRoutes.includes(route) && routes.includes(route) && index >= routes.length) {\n            return null;\n          }\n          let isScreenActive = 1;\n          if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            const sceneForActivity = scenes[routes.length - 1];\n            const outputValue = index === routes.length - 1 ? STATE_ON_TOP : index >= routes.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n          const {\n            headerShown = true,\n            headerTransparent,\n            freezeOnBlur,\n            autoHideHomeIndicator\n          } = scene.descriptor.options;\n          const safeAreaInsetTop = insets.top;\n          const safeAreaInsetRight = insets.right;\n          const safeAreaInsetBottom = insets.bottom;\n          const safeAreaInsetLeft = insets.left;\n          const headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n          const interpolationIndex = getInterpolationIndex(scenes, index);\n          const isModal = getIsModal(scene, interpolationIndex, isParentModal);\n          const isNextScreenTransparent = scenes[index + 1]?.descriptor.options.presentation === 'transparentModal';\n          const detachCurrentScreen = scenes[index + 1]?.descriptor.options.detachPreviousScreen !== false;\n          return _jsx(MaybeScreen, {\n            style: [StyleSheet.absoluteFill],\n            enabled: detachInactiveScreens,\n            active: isScreenActive,\n            freezeOnBlur: freezeOnBlur,\n            homeIndicatorHidden: autoHideHomeIndicator,\n            pointerEvents: \"box-none\",\n            children: _jsx(CardContainer, {\n              index: index,\n              interpolationIndex: interpolationIndex,\n              modal: isModal,\n              active: index === routes.length - 1,\n              focused: focused,\n              opening: openingRouteKeys.includes(route.key),\n              closing: closingRouteKeys.includes(route.key),\n              layout: layout,\n              gesture: gesture,\n              scene: scene,\n              safeAreaInsetTop: safeAreaInsetTop,\n              safeAreaInsetRight: safeAreaInsetRight,\n              safeAreaInsetBottom: safeAreaInsetBottom,\n              safeAreaInsetLeft: safeAreaInsetLeft,\n              onGestureStart: onGestureStart,\n              onGestureCancel: onGestureCancel,\n              onGestureEnd: onGestureEnd,\n              headerHeight: headerHeight,\n              isParentHeaderShown: isParentHeaderShown,\n              onHeaderHeightChange: this.handleHeaderLayout,\n              getPreviousScene: this.getPreviousScene,\n              getFocusedRoute: this.getFocusedRoute,\n              hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n              renderHeader: renderHeader,\n              onOpenRoute: onOpenRoute,\n              onCloseRoute: onCloseRoute,\n              onTransitionStart: onTransitionStart,\n              onTransitionEnd: onTransitionEnd,\n              isNextScreenTransparent: isNextScreenTransparent,\n              detachCurrentScreen: detachCurrentScreen,\n              preloaded: isPreloaded\n            })\n          }, route.key);\n        })\n      }), isFloatHeaderAbsolute ? floatingHeader : null]\n    });\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["getDefaultHeaderHeight","SafeAreaProviderCompat","React","Animated","Platform","StyleSheet","View","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","BottomSheetAndroid","DefaultTransition","FadeFromBottomAndroid","FadeFromRightAndroid","ModalFadeTransition","ModalSlideFromBottomIOS","ModalTransition","RevealFromBottomAndroid","ScaleFromCenterAndroid","SlideFromLeftIOS","SlideFromRightIOS","findLastIndex","getDistanceForDirection","getModalRouteKeys","MaybeScreen","MaybeScreenContainer","CardContainer","jsx","_jsx","jsxs","_jsxs","NAMED_TRANSITIONS_PRESETS","default","fade","fade_from_bottom","fade_from_right","none","reveal_from_bottom","scale_from_center","slide_from_left","slide_from_right","slide_from_bottom","select","ios","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","getIsModalPresentation","name","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","isRTL","gestureDirection","defaultGestureDirection","presentation","animation","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","routes","descriptors","gestures","preloadedRoutes","preloadedDescriptors","Value","openingRouteKeys","includes","direction","modalRouteKeys","assign","map","self","isPreloaded","previousRoute","undefined","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","excludedPlatforms","OS","isAnimationEnabled","transitionPreset","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","progress","current","next","__memo","every","it","headerHeights","constructor","initialMetrics","frame","handleLayout","e","nativeEvent","setState","handleHeaderLayout","previousHeight","getFocusedRoute","getPreviousScene","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","floatingHeader","Fragment","children","mode","onContentHeightChange","styles","floating","absolute","container","enabled","onLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","freezeOnBlur","autoHideHomeIndicator","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","homeIndicatorHidden","pointerEvents","modal","opening","closing","onHeaderHeightChange","hasAbsoluteFloatHeader","preloaded","create","flex","position","start","end","zIndex"],"sources":["C:\\Users\\poske\\OneDrive\\Desktop\\LocalHive\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  LocaleDirection,\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  type LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  BottomSheetAndroid,\n  DefaultTransition,\n  FadeFromBottomAndroid,\n  FadeFromRightAndroid,\n  ModalFadeTransition,\n  ModalSlideFromBottomIOS,\n  ModalTransition,\n  RevealFromBottomAndroid,\n  ScaleFromCenterAndroid,\n  SlideFromLeftIOS,\n  SlideFromRightIOS,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackAnimationName,\n  StackCardStyleInterpolator,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\nimport { findLastIndex } from '../../utils/findLastIndex';\nimport { getDistanceForDirection } from '../../utils/getDistanceForDirection';\nimport { getModalRouteKeys } from '../../utils/getModalRoutesKeys';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { CardContainer } from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  direction: LocaleDirection;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  preloadedDescriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid,\n  }),\n} as const satisfies Record<StackAnimationName, TransitionPreset>;\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  if (descriptor?.options.gestureDirection) {\n    return getDistanceForDirection(\n      layout,\n      descriptor?.options.gestureDirection,\n      isRTL\n    );\n  }\n\n  const defaultGestureDirection =\n    descriptor?.options.presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection;\n\n  const gestureDirection = descriptor?.options.animation\n    ? NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection\n    : defaultGestureDirection;\n\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor,\n    isRTL\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = [\n      ...props.routes,\n      ...props.state.preloadedRoutes,\n    ].reduce<GestureValues>((acc, curr) => {\n      const descriptor =\n        props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n      const { animation } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          (props.openingRouteKeys.includes(curr.key) && animation !== 'none') ||\n          props.state.preloadedRoutes.includes(curr)\n            ? getDistanceFromOptions(\n                state.layout,\n                descriptor,\n                props.direction === 'rtl'\n              )\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const modalRouteKeys = getModalRouteKeys(\n      [...props.routes, ...props.state.preloadedRoutes],\n      {\n        ...props.descriptors,\n        ...props.preloadedDescriptors,\n      }\n    );\n\n    const scenes = [...props.routes, ...props.state.preloadedRoutes].map(\n      (route, index, self) => {\n        // For preloaded screens, we don't care about the previous and the next screen\n        const isPreloaded = props.state.preloadedRoutes.includes(route);\n        const previousRoute = isPreloaded ? undefined : self[index - 1];\n        const nextRoute = isPreloaded ? undefined : self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          (isPreloaded ? props.preloadedDescriptors : props.descriptors)[\n            route.key\n          ] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          nextRoute &&\n          (props.descriptors[nextRoute?.key] ||\n            state.descriptors[nextRoute?.key]);\n\n        const previousDescriptor =\n          previousRoute &&\n          (props.descriptors[previousRoute?.key] ||\n            state.descriptors[previousRoute?.key]);\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but the majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 &&\n          nextDescriptor &&\n          nextDescriptor.options.presentation !== 'transparentModal'\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        // Assume modal if there are already modal screens in the stack\n        // or current screen is a modal when no presentation is specified\n        const isModal = modalRouteKeys.includes(route.key);\n\n        // Disable screen transition animation by default on web, windows and macos to match the native behavior\n        const excludedPlatforms =\n          Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos';\n\n        const animation =\n          optionsForTransitionConfig.animation ??\n          (excludedPlatforms ? 'default' : 'none');\n        const isAnimationEnabled = animation !== 'none';\n\n        const transitionPreset =\n          animation !== 'default'\n            ? NAMED_TRANSITIONS_PRESETS[animation]\n            : isModal || optionsForTransitionConfig.presentation === 'modal'\n              ? ModalTransition\n              : optionsForTransitionConfig.presentation === 'transparentModal'\n                ? ModalFadeTransition\n                : DefaultTransition;\n\n        const {\n          gestureEnabled = Platform.OS === 'ios' && isAnimationEnabled,\n          gestureDirection = transitionPreset.gestureDirection,\n          transitionSpec = transitionPreset.transitionSpec,\n          cardStyleInterpolator = isAnimationEnabled\n            ? transitionPreset.cardStyleInterpolator\n            : forNoAnimationCard,\n          headerStyleInterpolator = transitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = (Platform.OS !== 'ios' &&\n            optionsForTransitionConfig.presentation !== 'transparentModal') ||\n            getIsModalPresentation(cardStyleInterpolator),\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            optionsForTransitionConfig.presentation === 'transparentModal' ||\n            nextDescriptor?.options.presentation === 'modal' ||\n            nextDescriptor?.options.presentation === 'transparentModal' ||\n            getIsModalPresentation(cardStyleInterpolator)\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const isRTL = props.direction === 'rtl';\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animation,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor,\n              isRTL\n            ),\n            next:\n              nextGesture &&\n              nextDescriptor?.options.presentation !== 'transparentModal'\n                ? getProgressFromGesture(\n                    nextGesture,\n                    state.layout,\n                    nextDescriptor,\n                    isRTL\n                  )\n                : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor,\n                  isRTL\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }\n    );\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      openingRouteKeys,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n            ? i !==\n              findLastIndex(scenes, (scene) => {\n                const { cardStyleInterpolator } = scene.descriptor.options;\n\n                return (\n                  cardStyleInterpolator === forModalPresentationIOS ||\n                  cardStyleInterpolator?.name === 'forModalPresentationIOS'\n                );\n              })\n            : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <View style={styles.container}>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {[...routes, ...state.preloadedRoutes].map((route, index) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n            // It is possible that for a short period the route appears in both arrays.\n            // Particularly, if the screen is removed with `retain`, then it needs a moment to execute the animation.\n            // However, due to the router action, it immediately populates the `preloadedRoutes` array.\n            // Practically, the logic below takes care that it is rendered only once.\n            const isPreloaded =\n              state.preloadedRoutes.includes(route) && !routes.includes(route);\n            if (\n              state.preloadedRoutes.includes(route) &&\n              routes.includes(route) &&\n              index >= routes.length\n            ) {\n              return null;\n            }\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 0\n              | 1\n              | 2 = 1;\n\n            if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[routes.length - 1];\n              const outputValue =\n                index === routes.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= routes.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              freezeOnBlur,\n              autoHideHomeIndicator,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={[StyleSheet.absoluteFill]}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                homeIndicatorHidden={autoHideHomeIndicator}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === routes.length - 1}\n                  focused={focused}\n                  opening={openingRouteKeys.includes(route.key)}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                  preloaded={isPreloaded}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}