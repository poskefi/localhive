{"ast":null,"code":"\"use strict\";\n\nimport { getStateFromPath, NavigationContext } from '@react-navigation/core';\nimport React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport { LinkingContext } from \"./LinkingContext.js\";\nimport { UnhandledLinkingContext } from \"./UnhandledLinkingContext.js\";\nfunction extractNavigatorSpecificState(_, pathState, depth) {\n  let partialPathState = pathState;\n  let currentDepth = depth;\n  while (currentDepth) {\n    if (!partialPathState) {\n      return undefined;\n    }\n    partialPathState = partialPathState.routes[partialPathState.routes.length - 1].state;\n    currentDepth--;\n  }\n  return partialPathState;\n}\nexport function UNSTABLE_useUnhandledLinking() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n  const {\n    setLastUnhandledLink,\n    lastUnhandledLink\n  } = React.useContext(UnhandledLinkingContext);\n  const {\n    options\n  } = linking;\n  const getStateForRouteNamesChange = currentState => {\n    if (lastUnhandledLink == null) {\n      return;\n    }\n    const path = lastUnhandledLink;\n    if (!lastUnhandledLink) {\n      return;\n    }\n    const getStateFromPathHelper = options?.getStateFromPath ?? getStateFromPath;\n    const pathState = getStateFromPathHelper(path, options?.config);\n    if (!pathState) {\n      return;\n    }\n    let depth = 0;\n    let parent = navigation;\n    while (parent) {\n      depth++;\n      parent = parent.getParent();\n    }\n    const state = extractNavigatorSpecificState(currentState, pathState, depth);\n    if (!state) {\n      return;\n    }\n    return state;\n  };\n  const clearUnhandledLink = useLatestCallback(() => {\n    setLastUnhandledLink(undefined);\n  });\n  return {\n    lastUnhandledLink,\n    getStateForRouteNamesChange,\n    clearUnhandledLink\n  };\n}","map":{"version":3,"names":["getStateFromPath","NavigationContext","React","useLatestCallback","LinkingContext","UnhandledLinkingContext","extractNavigatorSpecificState","_","pathState","depth","partialPathState","currentDepth","undefined","routes","length","state","UNSTABLE_useUnhandledLinking","navigation","useContext","linking","setLastUnhandledLink","lastUnhandledLink","options","getStateForRouteNamesChange","currentState","path","getStateFromPathHelper","config","parent","getParent","clearUnhandledLink"],"sources":["C:\\Users\\poske\\OneDrive\\Desktop\\LocalHive\\node_modules\\@react-navigation\\native\\src\\useUnhandledLinking.tsx"],"sourcesContent":["import {\n  getStateFromPath,\n  NavigationContext,\n  type NavigationState,\n  type PartialState,\n} from '@react-navigation/core';\nimport React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { LinkingContext } from './LinkingContext';\nimport { UnhandledLinkingContext } from './UnhandledLinkingContext';\n\n// FIXME: don't rely on depth only to get the navigator state\nfunction extractNavigatorSpecificState(\n  _: NavigationState,\n  pathState: PartialState<NavigationState>,\n  depth: number\n) {\n  let partialPathState: PartialState<NavigationState> | undefined = pathState;\n\n  let currentDepth = depth;\n  while (currentDepth) {\n    if (!partialPathState) {\n      return undefined;\n    }\n    partialPathState =\n      partialPathState.routes[partialPathState.routes.length - 1].state;\n    currentDepth--;\n  }\n  return partialPathState;\n}\n\nexport function UNSTABLE_useUnhandledLinking() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n  const { setLastUnhandledLink, lastUnhandledLink } = React.useContext(\n    UnhandledLinkingContext\n  );\n\n  const { options } = linking;\n\n  const getStateForRouteNamesChange = (\n    currentState: NavigationState\n  ): PartialState<NavigationState> | undefined => {\n    if (lastUnhandledLink == null) {\n      // noop, nothing to handle\n      return;\n    }\n\n    // at web, the path is already extracted\n    const path = lastUnhandledLink;\n    if (!lastUnhandledLink) {\n      return;\n    }\n\n    // First, we parse the URL to get the desired state\n    const getStateFromPathHelper =\n      options?.getStateFromPath ?? getStateFromPath;\n\n    const pathState = getStateFromPathHelper(path, options?.config);\n\n    if (!pathState) {\n      return;\n    }\n\n    let depth = 0;\n    let parent = navigation;\n    while (parent) {\n      depth++;\n      parent = parent.getParent();\n    }\n\n    const state = extractNavigatorSpecificState(currentState, pathState, depth);\n\n    if (!state) {\n      return;\n    }\n\n    return state;\n  };\n\n  const clearUnhandledLink = useLatestCallback(() => {\n    setLastUnhandledLink(undefined);\n  });\n\n  return {\n    lastUnhandledLink,\n    getStateForRouteNamesChange,\n    clearUnhandledLink,\n  };\n}\n"],"mappings":";;AAAA,SACEA,gBAAgB,EAChBC,iBAAiB,QAGZ,wBAAwB;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD,SAASC,cAAc,QAAQ,qBAAkB;AACjD,SAASC,uBAAuB,QAAQ,8BAA2B;AAGnE,SAASC,6BAA6BA,CACpCC,CAAkB,EAClBC,SAAwC,EACxCC,KAAa,EACb;EACA,IAAIC,gBAA2D,GAAGF,SAAS;EAE3E,IAAIG,YAAY,GAAGF,KAAK;EACxB,OAAOE,YAAY,EAAE;IACnB,IAAI,CAACD,gBAAgB,EAAE;MACrB,OAAOE,SAAS;IAClB;IACAF,gBAAgB,GACdA,gBAAgB,CAACG,MAAM,CAACH,gBAAgB,CAACG,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAACC,KAAK;IACnEJ,YAAY,EAAE;EAChB;EACA,OAAOD,gBAAgB;AACzB;AAEA,OAAO,SAASM,4BAA4BA,CAAA,EAAG;EAC7C,MAAMC,UAAU,GAAGf,KAAK,CAACgB,UAAU,CAACjB,iBAAiB,CAAC;EACtD,MAAMkB,OAAO,GAAGjB,KAAK,CAACgB,UAAU,CAACd,cAAc,CAAC;EAChD,MAAM;IAAEgB,oBAAoB;IAAEC;EAAkB,CAAC,GAAGnB,KAAK,CAACgB,UAAU,CAClEb,uBACF,CAAC;EAED,MAAM;IAAEiB;EAAQ,CAAC,GAAGH,OAAO;EAE3B,MAAMI,2BAA2B,GAC/BC,YAA6B,IACiB;IAC9C,IAAIH,iBAAiB,IAAI,IAAI,EAAE;MAE7B;IACF;IAGA,MAAMI,IAAI,GAAGJ,iBAAiB;IAC9B,IAAI,CAACA,iBAAiB,EAAE;MACtB;IACF;IAGA,MAAMK,sBAAsB,GAC1BJ,OAAO,EAAEtB,gBAAgB,IAAIA,gBAAgB;IAE/C,MAAMQ,SAAS,GAAGkB,sBAAsB,CAACD,IAAI,EAAEH,OAAO,EAAEK,MAAM,CAAC;IAE/D,IAAI,CAACnB,SAAS,EAAE;MACd;IACF;IAEA,IAAIC,KAAK,GAAG,CAAC;IACb,IAAImB,MAAM,GAAGX,UAAU;IACvB,OAAOW,MAAM,EAAE;MACbnB,KAAK,EAAE;MACPmB,MAAM,GAAGA,MAAM,CAACC,SAAS,CAAC,CAAC;IAC7B;IAEA,MAAMd,KAAK,GAAGT,6BAA6B,CAACkB,YAAY,EAAEhB,SAAS,EAAEC,KAAK,CAAC;IAE3E,IAAI,CAACM,KAAK,EAAE;MACV;IACF;IAEA,OAAOA,KAAK;EACd,CAAC;EAED,MAAMe,kBAAkB,GAAG3B,iBAAiB,CAAC,MAAM;IACjDiB,oBAAoB,CAACR,SAAS,CAAC;EACjC,CAAC,CAAC;EAEF,OAAO;IACLS,iBAAiB;IACjBE,2BAA2B;IAC3BO;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}