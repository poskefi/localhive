{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\poske\\\\OneDrive\\\\Desktop\\\\LocalHive\\\\src\\\\screens\\\\WeatherScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport CONFIG from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  BASE_URL\n} = CONFIG;\nexport default function WeatherScreen({\n  navigation\n}) {\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [cityFilter, setCityFilter] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fetchWeather = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${BASE_URL}/weather`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setWeatherData(data);\n      setFilteredData(data);\n    } catch (error) {\n      console.error('Error fetching weather data:', error.message || error);\n      Alert.alert('Error', 'Unable to fetch weather information. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchWeather();\n  }, []);\n  const handleCityFilter = text => {\n    setCityFilter(text);\n    const filtered = weatherData.filter(item => item.city.toLowerCase().includes(text.toLowerCase()));\n    setFilteredData(filtered);\n  };\n  const handlePress = () => {\n    navigation.navigate('Maps');\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.cityFilterContainer,\n      children: [_jsxDEV(TextInput, {\n        style: styles.cityInput,\n        placeholder: \"Enter Zip Code\",\n        placeholderTextColor: \"#aaa\",\n        value: cityFilter,\n        onChangeText: handleCityFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), _jsxDEV(TouchableOpacity, {\n        onPress: handlePress,\n        children: _jsxDEV(Icon, {\n          name: \"map-marker\",\n          size: 24,\n          color: \"#333\",\n          style: styles.locationIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), loading ? _jsxDEV(ActivityIndicator, {\n      size: \"large\",\n      color: \"#000\",\n      style: styles.loadingIndicator\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : _jsxDEV(FlatList, {\n      data: filteredData,\n      keyExtractor: item => item.id.toString(),\n      renderItem: ({\n        item\n      }) => _jsxDEV(View, {\n        style: styles.weatherCard,\n        children: [_jsxDEV(Text, {\n          style: styles.weatherText,\n          children: [\"City: \", item.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), _jsxDEV(Text, {\n          style: styles.weatherText,\n          children: [\"Temperature: \", item.temperature, \"\\xB0F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), _jsxDEV(Text, {\n          style: styles.weatherText,\n          children: [\"Description: \", item.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this),\n      contentContainerStyle: styles.weatherList,\n      ListEmptyComponent: !loading && _jsxDEV(Text, {\n        style: styles.emptyText,\n        children: \"No weather updates found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5F5F5',\n    padding: 20,\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  weatherList: {\n    width: '100%'\n  },\n  weatherCard: {\n    backgroundColor: '#fff',\n    padding: 15,\n    marginVertical: 10,\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    width: '100%'\n  },\n  weatherText: {\n    fontSize: 16,\n    color: '#333'\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#aaa',\n    textAlign: 'center',\n    marginTop: 20\n  },\n  cityFilterContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 20,\n    width: '100%'\n  },\n  cityInput: {\n    flex: 1,\n    height: 40,\n    backgroundColor: '#fff',\n    borderRadius: 10,\n    paddingHorizontal: 10,\n    borderColor: '#ccc',\n    borderWidth: 1\n  },\n  locationIcon: {\n    marginLeft: 10\n  },\n  loadingIndicator: {\n    marginTop: 20\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","TextInput","FlatList","ActivityIndicator","Alert","TouchableOpacity","Icon","CONFIG","jsxDEV","_jsxDEV","BASE_URL","WeatherScreen","navigation","weatherData","setWeatherData","filteredData","setFilteredData","cityFilter","setCityFilter","loading","setLoading","fetchWeather","response","fetch","ok","Error","status","data","json","error","console","message","alert","handleCityFilter","text","filtered","filter","item","city","toLowerCase","includes","handlePress","navigate","style","styles","container","children","cityFilterContainer","cityInput","placeholder","placeholderTextColor","value","onChangeText","fileName","_jsxFileName","lineNumber","columnNumber","onPress","name","size","color","locationIcon","loadingIndicator","keyExtractor","id","toString","renderItem","weatherCard","weatherText","temperature","description","contentContainerStyle","weatherList","ListEmptyComponent","emptyText","create","flex","backgroundColor","padding","alignItems","title","fontSize","fontWeight","marginBottom","width","marginVertical","borderRadius","borderWidth","borderColor","textAlign","marginTop","flexDirection","height","paddingHorizontal","marginLeft"],"sources":["C:/Users/poske/OneDrive/Desktop/LocalHive/src/screens/WeatherScreen.js"],"sourcesContent":["// src/screens/WeatherScreen.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, TextInput, FlatList, ActivityIndicator, Alert, TouchableOpacity } from 'react-native';\r\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport CONFIG from './config';\r\n\r\nconst { BASE_URL } = CONFIG;\r\n\r\nexport default function WeatherScreen({navigation}) {\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [cityFilter, setCityFilter] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchWeather = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/weather`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setWeatherData(data);\r\n      setFilteredData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching weather data:', error.message || error);\r\n      Alert.alert('Error', 'Unable to fetch weather information. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWeather();\r\n  }, []);\r\n\r\n  const handleCityFilter = (text) => {\r\n    setCityFilter(text);\r\n    const filtered = weatherData.filter((item) =>\r\n      item.city.toLowerCase().includes(text.toLowerCase())\r\n    );\r\n    setFilteredData(filtered);\r\n  };\r\n\r\n  const handlePress = () => {\r\n    navigation.navigate('Maps')\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.cityFilterContainer}>\r\n        <TextInput\r\n          style={styles.cityInput}\r\n          placeholder=\"Enter Zip Code\"\r\n          placeholderTextColor=\"#aaa\"\r\n          value={cityFilter}\r\n          onChangeText={handleCityFilter}\r\n        />\r\n        <TouchableOpacity onPress={handlePress}>\r\n          <Icon name=\"map-marker\" size={24} color=\"#333\" style={styles.locationIcon} />\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {loading ? (\r\n        <ActivityIndicator size=\"large\" color=\"#000\" style={styles.loadingIndicator} />\r\n      ) : (\r\n        <FlatList\r\n          data={filteredData}\r\n          keyExtractor={(item) => item.id.toString()}\r\n          renderItem={({ item }) => (\r\n            <View style={styles.weatherCard}>\r\n              <Text style={styles.weatherText}>City: {item.city}</Text>\r\n              <Text style={styles.weatherText}>Temperature: {item.temperature}°F</Text>\r\n              <Text style={styles.weatherText}>Description: {item.description}</Text>\r\n            </View>\r\n          )}\r\n          contentContainerStyle={styles.weatherList}\r\n          ListEmptyComponent={\r\n            !loading && <Text style={styles.emptyText}>No weather updates found.</Text>\r\n          }\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#F5F5F5',\r\n    padding: 20,\r\n    alignItems: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  weatherList: {\r\n    width: '100%',\r\n  },\r\n  weatherCard: {\r\n    backgroundColor: '#fff',\r\n    padding: 15,\r\n    marginVertical: 10,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#ddd',\r\n    width: '100%',\r\n  },\r\n  weatherText: {\r\n    fontSize: 16,\r\n    color: '#333',\r\n  },\r\n  emptyText: {\r\n    fontSize: 16,\r\n    color: '#aaa',\r\n    textAlign: 'center',\r\n    marginTop: 20,\r\n  },\r\n  cityFilterContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n    width: '100%',\r\n  },\r\n  cityInput: {\r\n    flex: 1,\r\n    height: 40,\r\n    backgroundColor: '#fff',\r\n    borderRadius: 10,\r\n    paddingHorizontal: 10,\r\n    borderColor: '#ccc',\r\n    borderWidth: 1,\r\n  },\r\n  locationIcon: {\r\n    marginLeft: 10,\r\n  },\r\n  loadingIndicator: {\r\n    marginTop: 20,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}