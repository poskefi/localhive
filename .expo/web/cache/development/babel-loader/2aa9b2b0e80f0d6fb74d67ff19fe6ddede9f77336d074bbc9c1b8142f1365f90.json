{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"layout\", \"screenOptions\", \"screenLayout\", \"screenListeners\"];\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport useLatestCallback from 'use-latest-callback';\nimport { deepFreeze } from \"./deepFreeze.js\";\nimport { Group } from \"./Group.js\";\nimport { isArrayEqual } from \"./isArrayEqual.js\";\nimport { isRecordEqual } from \"./isRecordEqual.js\";\nimport { NavigationHelpersContext } from \"./NavigationHelpersContext.js\";\nimport { NavigationRouteContext } from \"./NavigationRouteContext.js\";\nimport { NavigationStateContext } from \"./NavigationStateContext.js\";\nimport { PreventRemoveProvider } from \"./PreventRemoveProvider.js\";\nimport { Screen } from \"./Screen.js\";\nimport { PrivateValueStore } from \"./types.js\";\nimport { useChildListeners } from \"./useChildListeners.js\";\nimport { useComponent } from \"./useComponent.js\";\nimport { useCurrentRender } from \"./useCurrentRender.js\";\nimport { useDescriptors } from \"./useDescriptors.js\";\nimport { useEventEmitter } from \"./useEventEmitter.js\";\nimport { useFocusedListenersChildrenAdapter } from \"./useFocusedListenersChildrenAdapter.js\";\nimport { useFocusEvents } from \"./useFocusEvents.js\";\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nimport { useKeyedChildListeners } from \"./useKeyedChildListeners.js\";\nimport { useLazyValue } from \"./useLazyValue.js\";\nimport { useNavigationHelpers } from \"./useNavigationHelpers.js\";\nimport { useOnAction } from \"./useOnAction.js\";\nimport { useOnGetState } from \"./useOnGetState.js\";\nimport { useOnRouteFocus } from \"./useOnRouteFocus.js\";\nimport { useRegisterNavigator } from \"./useRegisterNavigator.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nPrivateValueStore;\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions, groupLayout) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions], typeof child.props.screenLayout === 'function' ? child.props.screenLayout : groupLayout));\n        return acc;\n      }\n    }\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : child.type?.name}'${child.props != null && typeof child.props === 'object' && 'name' in child.props && child.props?.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n  return configs;\n};\nexport function useNavigationBuilder(createRouter, options) {\n  const navigatorKey = useRegisterNavigator();\n  const route = React.useContext(NavigationRouteContext);\n  const {\n      children,\n      layout,\n      screenOptions,\n      screenLayout,\n      screenListeners\n    } = options,\n    rest = _objectWithoutPropertiesLoose(options, _excluded);\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const router = useLazyValue(() => {\n    if (rest.initialRouteName != null && routeConfigs.every(config => config.props.name !== rest.initialRouteName)) {\n      throw new Error(`Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`);\n    }\n    return createRouter(rest);\n  });\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key ?? '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const setState = useLatestCallback(state => {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  });\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = route?.params?.state == null && route?.params?.initial !== false && route?.params?.screen === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? Object.assign({}, initialParams, initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n    if ((currentState === undefined || !isStateValid(currentState)) && route?.params?.state == null && !(typeof route?.params?.screen === 'string' && route?.params?.initial !== false)) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      let stateFromParams;\n      if (route?.params?.state != null) {\n        stateFromParams = route.params.state;\n      } else if (typeof route?.params?.screen === 'string' && route?.params?.initial !== false) {\n        stateFromParams = {\n          index: 0,\n          routes: [{\n            name: route.params.screen,\n            params: route.params.params,\n            path: route.params.path\n          }]\n        };\n      }\n      return [router.getRehydratedState(stateFromParams ?? currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state = isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    const navigatorStateForNextRouteNamesChange = options.UNSTABLE_getStateForRouteNamesChange?.(state);\n    nextState = navigatorStateForNextRouteNamesChange ? router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => name in previousRouteKeyList && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n  const previousNestedParamsRef = React.useRef(route?.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n  const shouldUpdate = state !== nextState;\n  useIsomorphicLayoutEffect(() => {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(() => {\n    stateCleanedUp.current = false;\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return () => {\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n  }, []);\n  const getState = useLatestCallback(() => {\n    const currentState = shouldUpdate ? nextState : getCurrentState();\n    return deepFreeze(isStateInitialized(currentState) ? currentState : initializedState);\n  });\n  const emitter = useEventEmitter(e => {\n    const routeNames = [];\n    let route;\n    if (e.target) {\n      route = state.routes.find(route => route.key === e.target);\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => route?.name === name));\n    }\n    if (route == null) {\n      return;\n    }\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat(...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map?.[type]) : undefined;\n    })).filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener?.(e));\n  });\n  useFocusEvents({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState\n  });\n  const navigation = useNavigationHelpers({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const {\n    describe,\n    descriptors\n  } = useDescriptors({\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    screenLayout,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    emitter\n  });\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = useComponent(children => {\n    const element = layout != null ? layout({\n      state,\n      descriptors,\n      navigation,\n      children\n    }) : children;\n    return _jsx(NavigationHelpersContext.Provider, {\n      value: navigation,\n      children: _jsx(PreventRemoveProvider, {\n        children: element\n      })\n    });\n  });\n  return {\n    state,\n    navigation,\n    describe,\n    descriptors,\n    NavigationContent\n  };\n}","map":{"version":3,"names":["CommonActions","React","isValidElementType","useLatestCallback","deepFreeze","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useIsomorphicLayoutEffect","useKeyedChildListeners","useLazyValue","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","jsx","_jsx","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","groupLayout","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","layout","Fragment","screenOptions","screenLayout","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","_objectWithoutPropertiesLoose","_excluded","routeConfigs","router","initialRouteName","every","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","state","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","useRef","current","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","params","initial","screen","getInitialState","stateFromParams","index","routes","path","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","navigatorStateForNextRouteNamesChange","UNSTABLE_getStateForRouteNamesChange","getStateForRouteNamesChange","routeKeyChanges","filter","previousNestedParamsRef","previousParams","action","reset","navigate","updatedState","getStateForAction","shouldUpdate","emitter","e","target","find","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","describe","NavigationContent","element","Provider","value"],"sources":["C:\\Users\\poske\\OneDrive\\Desktop\\LocalHive\\node_modules\\@react-navigation\\core\\src\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  type DefaultRouterOptions,\n  type NavigationAction,\n  type NavigationState,\n  type ParamListBase,\n  type PartialState,\n  type Route,\n  type Router,\n  type RouterConfigOptions,\n  type RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { deepFreeze } from './deepFreeze';\nimport { Group } from './Group';\nimport { isArrayEqual } from './isArrayEqual';\nimport { isRecordEqual } from './isRecordEqual';\nimport { NavigationHelpersContext } from './NavigationHelpersContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { PreventRemoveProvider } from './PreventRemoveProvider';\nimport { Screen } from './Screen';\nimport {\n  type DefaultNavigatorOptions,\n  type EventMapBase,\n  type EventMapCore,\n  type NavigatorScreenParams,\n  PrivateValueStore,\n  type RouteConfig,\n} from './types';\nimport { useChildListeners } from './useChildListeners';\nimport { useComponent } from './useComponent';\nimport { useCurrentRender } from './useCurrentRender';\nimport { type ScreenConfigWithParent, useDescriptors } from './useDescriptors';\nimport { useEventEmitter } from './useEventEmitter';\nimport { useFocusedListenersChildrenAdapter } from './useFocusedListenersChildrenAdapter';\nimport { useFocusEvents } from './useFocusEvents';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nimport { useKeyedChildListeners } from './useKeyedChildListeners';\nimport { useLazyValue } from './useLazyValue';\nimport { useNavigationHelpers } from './useNavigationHelpers';\nimport { useOnAction } from './useOnAction';\nimport { useOnGetState } from './useOnGetState';\nimport { useOnRouteFocus } from './useOnRouteFocus';\nimport { useRegisterNavigator } from './useRegisterNavigator';\n\n// This is to make TypeScript compiler happy\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options'],\n  groupLayout?: ScreenConfigWithParent<State, ScreenOptions, EventMap>['layout']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap,\n            unknown\n          >,\n        });\n\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n                ? [...groupOptions, child.props.screenOptions]\n                : [child.props.screenOptions],\n            typeof child.props.screenLayout === 'function'\n              ? child.props.screenLayout\n              : groupLayout\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props != null &&\n              typeof child.props === 'object' &&\n              'name' in child.props &&\n              child.props?.name\n                ? ` for the screen '${child.props.name}'`\n                : ''\n            }`\n          : typeof child === 'object'\n            ? JSON.stringify(child)\n            : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, (...args: any) => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap,\n    any\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const {\n    children,\n    layout,\n    screenOptions,\n    screenLayout,\n    screenListeners,\n    ...rest\n  } = options;\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const router = useLazyValue<Router<State, any>>(() => {\n    if (\n      rest.initialRouteName != null &&\n      routeConfigs.every(\n        (config) => config.props.name !== rest.initialRouteName\n      )\n    ) {\n      throw new Error(\n        `Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`\n      );\n    }\n\n    return createRouter(rest as unknown as RouterOptions);\n  });\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const setState = useLatestCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n\n      setCurrentState(state);\n    }\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null &&\n      !(\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      )\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      let stateFromParams;\n\n      if (route?.params?.state != null) {\n        stateFromParams = route.params.state;\n      } else if (\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      ) {\n        stateFromParams = {\n          index: 0,\n          routes: [\n            {\n              name: route.params.screen,\n              params: route.params.params,\n              path: route.params.path,\n            },\n          ],\n        };\n      }\n\n      return [\n        router.getRehydratedState(\n          (stateFromParams ?? currentState) as PartialState<State>,\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initialized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    const navigatorStateForNextRouteNamesChange =\n      options.UNSTABLE_getStateForRouteNamesChange?.(state);\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = navigatorStateForNextRouteNamesChange\n      ? // @ts-expect-error this is ok\n        router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : router.getStateForRouteNamesChange(state, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n          routeKeyChanges: Object.keys(routeKeyList).filter(\n            (name) =>\n              name in previousRouteKeyList &&\n              routeKeyList[name] !== previousRouteKeyList[name]\n          ),\n        });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useIsomorphicLayoutEffect(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    // In strict mode, React will double-invoke effects.\n    // So we need to reset the flag if component was not unmounted\n    stateCleanedUp.current = false;\n\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getState = useLatestCallback((): State => {\n    const currentState = shouldUpdate ? nextState : getCurrentState();\n\n    return deepFreeze(\n      (isStateInitialized(currentState)\n        ? currentState\n        : initializedState) as State\n    );\n  });\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    const routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const { describe, descriptors } = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    screenLayout,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => {\n    const element =\n      layout != null\n        ? layout({\n            state,\n            descriptors,\n            navigation,\n            children,\n          })\n        : children;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <PreventRemoveProvider>{element}</PreventRemoveProvider>\n      </NavigationHelpersContext.Provider>\n    );\n  });\n\n  return {\n    state,\n    navigation,\n    describe,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}