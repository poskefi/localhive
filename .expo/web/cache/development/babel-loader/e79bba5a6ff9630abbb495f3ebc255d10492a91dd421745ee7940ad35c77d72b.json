{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport { EnsureSingleNavigator } from \"./EnsureSingleNavigator.js\";\nimport { NavigationStateContext } from \"./NavigationStateContext.js\";\nimport { StaticContainer } from \"./StaticContainer.js\";\nimport { useOptionsGetters } from \"./useOptionsGetters.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function SceneView({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions\n}) {\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const {\n    addOptionsGetter\n  } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation\n  });\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState(Object.assign({}, state, {\n      routes: state.routes.map(r => r.key === route.key ? Object.assign({}, r, {\n        state: child\n      }) : r)\n    }));\n  }, [getState, route.key, setState]);\n  const isInitialRef = React.useRef(true);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n  React.useEffect(() => {\n    return clearOptions;\n  }, []);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state: routeState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return _jsx(NavigationStateContext.Provider, {\n    value: context,\n    children: _jsx(EnsureSingleNavigator, {\n      children: _jsx(StaticContainer, {\n        name: screen.name,\n        render: ScreenComponent || screen.children,\n        navigation: navigation,\n        route: route,\n        children: ScreenComponent !== undefined ? _jsx(ScreenComponent, {\n          navigation: navigation,\n          route: route\n        }) : screen.children !== undefined ? screen.children({\n          navigation,\n          route\n        }) : null\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","EnsureSingleNavigator","NavigationStateContext","StaticContainer","useOptionsGetters","jsx","_jsx","SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","Object","assign","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","children","name","render"],"sources":["C:\\Users\\poske\\OneDrive\\Desktop\\LocalHive\\node_modules\\@react-navigation\\core\\src\\SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { EnsureSingleNavigator } from './EnsureSingleNavigator';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { StaticContainer } from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport { useOptionsGetters } from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}