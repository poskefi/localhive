{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"styleInterpolator\", \"interpolationIndex\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"children\", \"containerStyle\", \"contentStyle\", \"closing\", \"direction\", \"gestureResponseDistance\", \"gestureVelocityImpact\", \"onClose\", \"onGestureBegin\", \"onGestureCanceled\", \"onGestureEnd\", \"onOpen\", \"onTransition\", \"transitionSpec\"];\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CardAnimationContext } from \"../../utils/CardAnimationContext.js\";\nimport { getDistanceForDirection } from \"../../utils/getDistanceForDirection.js\";\nimport { getInvertedMultiplier } from \"../../utils/getInvertedMultiplier.js\";\nimport { getShadowStyle } from \"../../utils/getShadowStyle.js\";\nimport { memoize } from \"../../utils/memoize.js\";\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport { CardSheet } from \"./CardSheet.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nconst hasOpacityStyle = style => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nexport class Card extends React.Component {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style\n    }) => style ? _jsx(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null\n  };\n  componentDidMount() {\n    if (!this.props.preloaded) {\n      this.animate({\n        closing: this.props.closing\n      });\n    }\n    this.isCurrentlyMounted = true;\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      gesture,\n      direction,\n      layout,\n      gestureDirection,\n      opening,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection, direction === 'rtl'));\n    }\n    const toValue = this.getAnimateToValue(this.props);\n    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n      this.animate({\n        closing\n      });\n    } else if (opening && !prevProps.opening) {\n      gesture.setValue(getDistanceForDirection(layout, gestureDirection, direction === 'rtl'));\n      this.animate({\n        closing\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.props.gesture?.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n  isCurrentlyMounted = false;\n  isClosing = new Animated.Value(FALSE);\n  inverted = new Animated.Value(getInvertedMultiplier(this.props.gestureDirection, this.props.direction === 'rtl'));\n  layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height)\n  };\n  isSwiping = new Animated.Value(FALSE);\n  animate = ({\n    closing,\n    velocity\n  }) => {\n    const {\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n      gesture\n    } = this.props;\n    const toValue = this.getAnimateToValue(Object.assign({}, this.props, {\n      closing\n    }));\n    this.lastToValue = toValue;\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n    const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n    clearTimeout(this.pendingGestureCallback);\n    onTransition?.({\n      closing,\n      gesture: velocity !== undefined\n    });\n    animation(gesture, Object.assign({}, spec.config, {\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false\n    })).start(({\n      finished\n    }) => {\n      this.handleEndInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n        if (this.isCurrentlyMounted) {\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n  getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n    direction,\n    preloaded\n  }) => {\n    if (!closing && !preloaded) {\n      return 0;\n    }\n    return getDistanceForDirection(layout, gestureDirection, direction === 'rtl');\n  };\n  setPointerEventsEnabled = enabled => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n    this.ref.current?.setPointerEvents(pointerEvents);\n  };\n  handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n  handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n  handleGestureStateChange = ({\n    nativeEvent\n  }) => {\n    const {\n      direction,\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact\n    } = this.props;\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n      case GestureState.FAILED:\n        {\n          this.isSwiping.setValue(FALSE);\n          this.handleEndInteraction();\n          const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n          this.animate({\n            closing: this.props.closing,\n            velocity\n          });\n          onGestureCanceled?.();\n          break;\n        }\n      case GestureState.END:\n        {\n          this.isSwiping.setValue(FALSE);\n          let distance;\n          let translation;\n          let velocity;\n          if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n            distance = layout.height;\n            translation = nativeEvent.translationY;\n            velocity = nativeEvent.velocityY;\n          } else {\n            distance = layout.width;\n            translation = nativeEvent.translationX;\n            velocity = nativeEvent.velocityX;\n          }\n          const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection, direction === 'rtl') > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;\n          this.animate({\n            closing,\n            velocity\n          });\n          if (closing) {\n            this.pendingGestureCallback = setTimeout(() => {\n              onClose();\n              this.forceUpdate();\n            }, 32);\n          }\n          onGestureEnd?.();\n          break;\n        }\n    }\n  };\n  getInterpolatedStyle = memoize((styleInterpolator, animation) => styleInterpolator(animation));\n  getCardAnimation = memoize((interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n    index: interpolationIndex,\n    current: {\n      progress: current\n    },\n    next: next && {\n      progress: next\n    },\n    closing: this.isClosing,\n    swiping: this.isSwiping,\n    inverted: this.inverted,\n    layouts: {\n      screen: layout\n    },\n    insets: {\n      top: insetTop,\n      right: insetRight,\n      bottom: insetBottom,\n      left: insetLeft\n    }\n  }));\n  gestureActivationCriteria() {\n    const {\n      direction,\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n    const distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        },\n        enableTrackpadTwoFingerGesture\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection, direction === 'rtl');\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      }\n    }\n  }\n  ref = React.createRef();\n  render() {\n    const _this$props = this.props,\n      {\n        styleInterpolator,\n        interpolationIndex,\n        current,\n        gesture,\n        next,\n        layout,\n        insets,\n        overlay,\n        overlayEnabled,\n        shadowEnabled,\n        gestureEnabled,\n        gestureDirection,\n        pageOverflowEnabled,\n        children,\n        containerStyle: customContainerStyle,\n        contentStyle\n      } = _this$props,\n      rest = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    const interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n    return _jsxs(CardAnimationContext.Provider, {\n      value: interpolationProps,\n      children: [_jsx(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), _jsxs(View, Object.assign({\n        pointerEvents: \"box-none\",\n        collapsable: false\n      }, rest, {\n        children: [overlayEnabled ? _jsx(View, {\n          pointerEvents: \"box-none\",\n          style: StyleSheet.absoluteFill,\n          children: overlay({\n            style: overlayStyle\n          })\n        }) : null, _jsx(Animated.View, {\n          style: [styles.container, containerStyle, customContainerStyle],\n          pointerEvents: \"box-none\",\n          children: _jsx(PanGestureHandler, Object.assign({\n            enabled: layout.width !== 0 && gestureEnabled,\n            onGestureEvent: handleGestureEvent,\n            onHandlerStateChange: this.handleGestureStateChange\n          }, this.gestureActivationCriteria(), {\n            children: _jsxs(Animated.View, {\n              needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n              style: [styles.container, cardStyle],\n              children: [shadowEnabled && shadowStyle && !isTransparent ? _jsx(Animated.View, {\n                style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowStart] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowEnd] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n                  backgroundColor\n                }, shadowStyle],\n                pointerEvents: \"none\"\n              }) : null, _jsx(CardSheet, {\n                ref: this.ref,\n                enabled: pageOverflowEnabled,\n                layout: layout,\n                style: contentStyle,\n                children: children\n              })]\n            })\n          }))\n        })]\n      }))]\n    });\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute'\n  },\n  shadowHorizontal: Object.assign({\n    top: 0,\n    bottom: 0,\n    width: 3\n  }, getShadowStyle({\n    offset: {\n      width: -1,\n      height: 1\n    },\n    radius: 5,\n    opacity: 0.3\n  })),\n  shadowStart: {\n    start: 0\n  },\n  shadowEnd: {\n    end: 0\n  },\n  shadowVertical: Object.assign({\n    start: 0,\n    end: 0,\n    height: 3\n  }, getShadowStyle({\n    offset: {\n      width: 1,\n      height: -1\n    },\n    radius: 5,\n    opacity: 0.3\n  })),\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"names":["Color","React","Animated","InteractionManager","Platform","StyleSheet","View","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","getShadowStyle","memoize","GestureState","PanGestureHandler","CardSheet","jsx","_jsx","jsxs","_jsxs","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","hasOpacityStyle","style","flattenedStyle","flatten","opacity","Card","Component","defaultProps","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","pointerEvents","styles","componentDidMount","props","preloaded","animate","closing","isCurrentlyMounted","componentDidUpdate","prevProps","gesture","direction","layout","gestureDirection","opening","width","height","setValue","inverted","toValue","getAnimateToValue","lastToValue","componentWillUnmount","stopAnimation","handleEndInteraction","isClosing","Value","isSwiping","velocity","transitionSpec","onOpen","onClose","onTransition","Object","assign","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","forceUpdate","enabled","ref","current","setPointerEvents","interactionHandle","createInteractionHandle","clearInteractionHandle","handleGestureStateChange","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","state","ACTIVE","CANCELLED","FAILED","velocityY","velocityX","END","distance","translation","translationY","translationX","setTimeout","getInterpolatedStyle","styleInterpolator","getCardAnimation","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","layouts","screen","insets","top","right","bottom","left","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","createRef","render","_this$props","overlayEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","_objectWithoutPropertiesLoose","_excluded","interpolationProps","interpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","value","collapsable","absoluteFill","container","onGestureEvent","onHandlerStateChange","needsOffscreenAlphaCompositing","shadow","shadowHorizontal","shadowStart","shadowEnd","shadowVertical","shadowTop","shadowBottom","create","flex","position","offset","radius","end"],"sources":["C:\\Users\\poske\\OneDrive\\Desktop\\LocalHive\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\Card.tsx"],"sourcesContent":["import type { LocaleDirection } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  type StyleProp,\n  StyleSheet,\n  View,\n  type ViewProps,\n  type ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport { CardAnimationContext } from '../../utils/CardAnimationContext';\nimport { getDistanceForDirection } from '../../utils/getDistanceForDirection';\nimport { getInvertedMultiplier } from '../../utils/getInvertedMultiplier';\nimport { getShadowStyle } from '../../utils/getShadowStyle';\nimport { memoize } from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  type PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport { CardSheet, type CardSheetRef } from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  opening: boolean;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation<number>;\n  current: Animated.AnimatedInterpolation<number>;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  direction: LocaleDirection;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  preloaded: boolean;\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    if (!this.props.preloaded) {\n      this.animate({\n        closing: this.props.closing,\n      });\n    }\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { gesture, direction, layout, gestureDirection, opening, closing } =\n      this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(\n        getInvertedMultiplier(gestureDirection, direction === 'rtl')\n      );\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // The route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    } else if (opening && !prevProps.opening) {\n      // This can happen when screen somewhere below in the stack comes into focus via rearranging\n      // Also reset the animated value to make sure that the animation starts from the beginning\n      gesture.setValue(\n        getDistanceForDirection(layout, gestureDirection, direction === 'rtl')\n      );\n\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture?.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(\n      this.props.gestureDirection,\n      this.props.direction === 'rtl'\n    )\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { transitionSpec, onOpen, onClose, onTransition, gesture } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n    direction,\n    preloaded,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n    direction: LocaleDirection;\n    preloaded: boolean;\n  }) => {\n    if (!closing && !preloaded) {\n      return 0;\n    }\n\n    return getDistanceForDirection(\n      layout,\n      gestureDirection,\n      direction === 'rtl'\n    );\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.ref.current?.setPointerEvents(pointerEvents);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      direction,\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n      case GestureState.FAILED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({\n          closing: this.props.closing,\n          velocity,\n        });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection, direction === 'rtl') >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation<number>,\n      next: Animated.AnimatedInterpolation<number> | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { direction, layout, gestureDirection, gestureResponseDistance } =\n      this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n            gestureDirection === 'vertical-inverted'\n          ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n          : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(\n        gestureDirection,\n        direction === 'rtl'\n      );\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private ref = React.createRef<CardSheetRef>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      closing,\n      direction,\n      gestureResponseDistance,\n      gestureVelocityImpact,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      onOpen,\n      onTransition,\n      transitionSpec,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View\n          pointerEvents=\"box-none\"\n          // Make sure this view is not removed on the new architecture, as it causes focus loss during navigation on Android.\n          // This can happen when the view flattening results in different trees - due to `overflow` style changing in a parent.\n          collapsable={false}\n          {...rest}\n        >\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowStart]\n                        : gestureDirection === 'horizontal-inverted'\n                          ? [styles.shadowHorizontal, styles.shadowEnd]\n                          : gestureDirection === 'vertical'\n                            ? [styles.shadowVertical, styles.shadowTop]\n                            : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.ref}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    ...getShadowStyle({\n      offset: {\n        width: -1,\n        height: 1,\n      },\n      radius: 5,\n      opacity: 0.3,\n    }),\n  },\n  shadowStart: {\n    start: 0,\n  },\n  shadowEnd: {\n    end: 0,\n  },\n  shadowVertical: {\n    start: 0,\n    end: 0,\n    height: 3,\n    ...getShadowStyle({\n      offset: {\n        width: 1,\n        height: -1,\n      },\n      radius: 5,\n      opacity: 0.3,\n    }),\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}